import matplotlib.pyplot as plt 
from matplotlib.ticker import MultipleLocator
import matplotlib.patches as pat
import os
import numpy as np
from objective_function import ObjectiveFunction

# H, W = (100, 100)
# R = [5, 10]
# UE = [x/2 for x in R]
# cell_W, cell_H = (10, 10)
# targets = []
# for h in range(int(abs(H/cell_H))):
#     for w in range(int(abs(W/cell_W))):
#         targets.append([w*cell_W + cell_W/2, h*cell_H + cell_H/2])
# xtarget = [x[0] for x in targets]
# ytarget = [x[1] for x in targets]
# target_covered = targets

# not_covered = [[5, 25], [5, 45], [5, 55], [5,65], [5, 75], [5, 85], [15, 75], [25, 15], [25, 85], [35, 35], [35, 45], [35, 75], [35, 85], [45, 15], [45, 25], [45, ]]
# target_covered.remove([15, 45])
# target_covered.remove([45, 35])


# harmony = [[7.753687575163134, -1], [93.59250605452237, 44.131496332351006], [53.485208329874794, 46.03810351442931], [86.11742033759447, 47.273070280212295], [-1, 49.65841437769844], [74.25617943983914, 86.61748357840467], [15.22270536092531, 12.729480016853927], [93.54809294602629, 73.19767803867057], [94.37786896581387, 13.993444907393721], [49.17040097939773, 74.31508854469203], [-1, 17.792854948571865], [34.29410342577313, 54.61495079854784], [73.39586670551762, -1], [87.27029940743112, 6.446690228883328], [83.65819503625183, 56.12248291248753], [53.740125076912, 74.21258105726123], [65.81494091490528, 82.97259723422394], [86.07100104873768, -1], [-1, 80.98301087830863], [77.74278574195719, 78.54078736500375], [85.33444215532427, 29.954721842556427], [41.480312687781684, 31.104855732726296], [70.45546587409844, -1], [81.36816753082047, -1], [14.02993489935963, -1], [94.0311744560274, 57.15259435691752], [26.401779395617684, 45.54811613680636], [6.032794979220253, 27.713811075149156], [36.28159814133083, 15.624124212974083], [42.84960276264247, 6.249247791425889], [93.24095053122625, 34.385317074835136], [46.10827639503253, 32.97161041309936], [13.815782522590128, 85.36395279176583], [67.48620257254892, -1], [56.56971499189858, 94.67914932705754], [76.19881174543595, 27.398085953420555], [-1, 64.79608770543756], [13.493726968795675, 62.47182647166194], [60.86148584892347, 64.31557970444999], [17.045241390431663, 94.33782049785438], [75.72976280893376, 89.77440968454759], [69.04858115347794, 18.38786735607765], [66.1078654153967, 58.01525759207771], [44.5424926675005, 52.95173022009136], [54.80777492296832, 7.380884341477827], [65.29031511722967, 24.827302664224405], [84.69054619909302, 87.27689090325184], [7.171688851916429, 5.831021022525771], [23.241924779218294, 36.604109300048364], [63.96054295678261, 93.70137952789179], [92.8736969794145, 52.71598579809771], [55.80962996946464, 72.19134586359122], [86.225691669834, 94.53549989206985], [15.506032458581112, 56.82632606004363], [66.2839077903212, 6.6162213122804605], [86.62323964534089, 13.980533704968213], [27.326134180944937, 94.37182791630964], [-1, 11.403181698794942], [51.408914202672925, -1], [-1, -1], [82.90573192794749, 26.46571160687331], [45.13900099462547, 83.62467498770725], [-1, -1], [69.43462812229315, 41.42382953192747], [37.338387201507466, 80.12686865344719], [25.159713442339157, 56.83829355426513], [17.390045273969196, 45.680011743682506], [52.86298607683681, 23.441091594867256], [82.97003661008281, 52.55898156386836], [34.347459221874054, 94.11000682878469], [82.47950069029862, 60.692674287528796], [47.315483583384, 56.22256256323735], [22.447696946291853, 8.326301130037866], [3.9727134239194877, 93.31467088407504], [87.38117878252571, 75.26295362308113], [94.59153252683441, 94.16968185218698], [25.7384276493673, 74.15804916493899], [35.10144350402466, 62.518494547637104], [35.38169829902778, 27.06666055701241], [69.62420260244907, 44.80413576923349], [3.7193011973195853, 14.682237573230754], [94.15284234810089, 4.995553503013352], [67.99569188629927, 52.452916546244644], [65.46349587480525, 74.6463414434512], [45.85388387542025, 93.8905584002211], [53.10468699292812, 84.16003358855409], [56.596864028135876, 56.66428120261356], [46.205009377948564, -1], [15.00859461080985, 23.950596128453018], [93.9816719953722, 27.086307696717405], [-1, 5.0628625360220685], [27.55632477097623, 64.89008490192957], [5.309794457592108, 34.21829291391991], [66.34740884027343, -1], [94.39676880648189, -1], [13.590911936378689, 5.7081995056002155], [16.396850165676344, 32.97226373953038], [24.369605729716024, 27.334384110673156], [82.95045509959047, 91.23067088264828], [35.045322398374516, 7.51332229483851]]
# types = [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1]

def draw(harmony, types, target_covered, savepath, H, W, R, cell_H, cell_W):
    # H, W = (100, 100)
    # R = [5, 10]
    # # UE = [x/2 for x in R]
    # cell_W, cell_H = (10, 10)
    targets = []
    for h in range(int(abs(H/cell_H))):
        for w in range(int(abs(W/cell_W))):
            targets.append([w*cell_W + cell_W/2, h*cell_H + cell_H/2])
    xtarget = [x[0] for x in targets]
    ytarget = [x[1] for x in targets]
    xused = []
    yused = []
    for x in harmony:
        if x[0] == -1 or x[1] == -1:
            continue
        xused.append(x[0])
        yused.append(x[1])

    fig, ax1 = plt.subplots(1)
    ax1.set_xlim(-10, W+10)
    ax1.set_ylim(-10, H+10)
    count1 = count2 = 0
    for target in zip(xtarget, ytarget):
        if list(target) in target_covered:
            if count1 == 0:
                ax1.plot([target[0]], [target[1]], 'ro', markersize=12, label='covered target', zorder=1)
            else:
                ax1.plot([target[0]], [target[1]], 'ro', markersize=12, zorder=1)
            count1 += 1
        else:
            if count2 == 0:
                ax1.plot([target[0]], [target[1]], 'bo', markersize=12, label='uncovered target', zorder=1)
            else:
                ax1.plot([target[0]], [target[1]], 'bo', markersize=12, zorder=1)
            count2 += 1
    
    ax1.scatter(xused, yused, marker="^", color='tab:orange', s=150, label='sensor', zorder=2)
    c = 0
    for s in range(len(xused)):
        c += 1
        if c == 1:
            ax1.add_patch(plt.Circle((xused[s], yused[s]), R[types[s]], color='b', fill=False, label='sensing range'))
        else:
            ax1.add_patch(plt.Circle((xused[s], yused[s]), R[types[s]], color='b', fill=False))
    rect = pat.Rectangle((0, 0), W, H, linewidth=3, edgecolor='black', facecolor='none')
    ax1.add_patch(rect)
    ax1.set_aspect('equal', adjustable='datalim')
    ax1.plot()
    spacing = cell_H # This can be your user specified spacing. 
    majorLocator = MultipleLocator(spacing)
    # Set minor tick locations.
    ax1.yaxis.set_major_locator(majorLocator)
    ax1.xaxis.set_major_locator(majorLocator)
    
    ax1.grid(which='major', linestyle='--')
    
    #plt.tight_layout()
    plt.legend()
    
    plt.savefig(savepath)
    #plt.show()

#draw(harmony, types, target_covered, './search10.png')
    



def plot(data_asc, sensors, types, radius):
    targets = []
    cellw = 100
    cellh = 100
    w = 1000
    h = 1000
    init_x = cellw / 2
    init_y = cellh / 2
    while init_x < w:
        while init_y < h:
            targets.append([init_x, init_y])
            init_y += cellh
        init_x += cellw
        init_y = cellh / 2

    xused = []
    yused = []
    for x in sensors:
        if x[0] == -1 or x[1] == -1:
            continue
        xused.append(x[0])
        yused.append(x[1])
    sensors = list(zip(xused, yused))
    sensors = [list(x) for x in sensors]

    obj_func = ObjectiveFunction(hmv=100, hms=50, targets=targets, types=2, radius=radius, w=w, h=h, cell_h=cellh, cell_w=cellw)
    _, covered_targets = obj_func._coverage_ratio(sensors, types)   
    uncovered_targets = []
    for t in targets:
        if t not in covered_targets:
            uncovered_targets.append(t)

    # uncovered_targets = targets

    def scatter(Points, c, marker, name, s, order=1):
        x, y, z = zip(*[Point for Point in Points])
        ax.scatter(x, y, z, c=c, marker=marker, label=name, s=s, alpha=1, zorder=order)

    def plot_sphere(center, radius, ax):
        # Create a meshgrid of points within the sphere
        theta = np.linspace(0, 2 * np.pi, 100)
        phi = np.linspace(0, np.pi, 100)
        theta, phi = np.meshgrid(theta, phi)

        x = center[0] + radius * np.sin(phi) * np.cos(theta)
        y = center[1] + radius * np.sin(phi) * np.sin(theta)
        z = center[2] + radius * np.cos(phi)

        # plot the sphere
        ax.plot_surface(x, y, z, color='b', alpha=0.1)

    ax = plt.figure(figsize=(20, 20)).add_subplot(projection='3d')
    for i in range(len(targets)):
        targets[i].append(data_asc[int(targets[i][0]//25)][int(targets[i][1]//25)])
    for i in range(len(sensors)):
        sensors[i].append(data_asc[int(sensors[i][0]//25)][int(sensors[i][1]//25)])
        plot_sphere(sensors[i], radius=radius[types[i]], ax=ax)

    scatter(uncovered_targets, c='r', marker='o', name='uncovered target', s=100, order=2)
    scatter(covered_targets, c='b', marker='o', name='covered target', s=100, order=2)
    scatter(sensors, c='tab:orange', marker='^', name='sensor', s=100, order=1)

    _x = [25 * i for i in range(len(data_asc))]
    _y = [25 * i for i in range(len(data_asc))]
    _xx, _yy = np.meshgrid(_x, _y)
    x, y = _xx.ravel(), _yy.ravel()

    top = []

    bottom = np.zeros_like(top)
    width = depth = 25

    minx = []
    maxx = []

    for i in range(len(data_asc)):
        minx.append(min(data_asc[i]))
        maxx.append(max(data_asc[i]))

    for i in range(len(data_asc)):
        for j in range(len(data_asc[i])):
            top.append(data_asc[j][i])

    bottom = [0 for i in range(len(top))]
    ax.bar3d(x, y, bottom, width, depth, top, shade=True, alpha=0.001)
    ax.set_zlim(0, 1000)
    ax.set_xlabel('X', fontsize=20, labelpad=14)
    ax.set_ylabel('Y', fontsize=20, labelpad=24)
    ax.set_zlabel('Z', fontsize=20, labelpad=18)
    ax.tick_params(axis='x', labelsize=20)
    ax.tick_params(axis='y', labelsize=20, pad=10)
    ax.tick_params(axis='z', labelsize=20, pad=12)

    major_ticks = np.arange(0, 1001, 100)
    ax.set_xticks(major_ticks)
    ax.set_yticks(major_ticks)
    # And a corresponding grid
    ax.grid(which='both')
    # Or if you want different settings for the grids:
    # ax.grid(which='major', alpha=0.5)
    # vertices = np.array([[0, 0, 0], [w, 0, 0], [w, h, 0], [0, h, 0], [0, 0, 0]])
    # # Plot the square
    # ax.plot(vertices[:,0], vertices[:,1], vertices[:,2], color='b')
    plt.legend(fontsize=20)
    ax.axis('equal')
    file = "./3d_hsa.pdf"
    if os.path.isfile(file):
        os.remove(file)
    plt.savefig(file)
    # plt.show()

from dataset import import_data

data_asc = import_data('sonla')[1]
sensors = [[374.99137750044736, 390.14890704885516], [848.8458399022448, 452.13260580673676], [630.4492309662814, -1], [864.0229341592532, 660.1693743781632], [209.61343391637715, 126.72343503468043], [135.86549022755912, 385.5768119102538], [697.2103728701048, 188.08266445179908], [463.6289879096212, 849.0109185063515], [349.10868112098416, 678.7940492595839], [589.2251117542069, 725.1450038480161], [31.587930918528315, 260.4765759938032], [838.5949958620663, 705.7222078813901], [62.40416454516322, 384.46237109298124], [414.2728521523978, 528.0644454120583], [166.80093151389337, 266.35063125488523], [734.1723818317736, 936.5406186396652], [743.8579932825131, 531.0668997121926], [281.5618914626775, 168.4144936650605], [74.50131898448511, 645.842511717054], [458.32795278969564, 764.4367977820579], [558.8601110593647, 358.5665680557655], [273.930837431839, 516.5557347906126], [182.611101237106, 492.08914353723753], [814.0408520090666, 110.98323246975161], [730.801632125565, 377.5712099998364], [424.97504960905303, 230.70545034438615], [114.94384222507696, 260.826308790711], [83.9877294640411, 752.5966697940269], [889.4882704650471, 488.81922071215513], [244.78789355546192, 578.7558328800554], [732.4504636390916, 91.52673474743386], [616.592553156227, -1], [37.1688951150778, 562.4636257572818], [645.0831641499555, 35.60583619121294], [196.314658557033, 104.42784622505508], [897.4485298160046, 53.710048982846644], [713.7266200684998, 528.8061158358216], [242.62244129758417, 54.68867352550449], [327.2516891270511, 480.20565861569463], [684.5283957711138, 897.8314746897555], [439.68127547782177, 318.45686813417666], [243.24661274210933, 444.5819222735315], [250.72443794765115, 336.04329043613393], [157.6975652174273, 343.17161036001585], [228.745885010674, 856.8268380608894], [912.7412296047711, -1], [166.67520844908645, 45.568992669335586], [643.26449177929, 570.3567062855838], [944.804038696039, 944.9295348398209], [879.7711989344748, 439.0864304146948], [72.15865321324526, 342.45786756571675], [351.8679885403723, 205.76402235102546], [625.4011485538, 247.7565499175728], [657.1679200692927, 168.32836809721675], [936.9300944749774, 170.2605362246992], [310.42087050037884, 587.9019630986489], [394.65218996667875, 268.57266517313644], [545.0861499378009, 423.06131680009577], [841.3383843004927, 829.512525991796], [359.5201991791662, 532.4787021958915], [413.3460227538434, 690.3551211023521], [596.6994280421364, 673.9318614304159], [89.80255341574538, 272.4672810884415], [74.46513663302576, 244.67530832248204], [29.961964203117628, 39.31716814714602], [411.0101827054333, 151.03916212396092], [659.2971478892778, 76.31024326392681], [497.38743394827907, 343.5107243365532], [559.5962276193942, 828.1432433881027], [871.45652454128, 859.7657061928395], [327.74524324378405, 704.859660486188], [176.26396043532864, 362.9585049986104], [397.4640358132439, 345.5322247733735], [553.822399599393, 598.7453624468482], [41.00819608963473, 95.88880530295944], [748.175798104991, 400.9201560995402], [425.49308085780433, 380.55323565013725], [99.01180070826479, -1], [406.3090138275551, 52.75454574401885], [399.52291005841147, 182.885704203596], [683.6460478373567, 453.59441570255154], [560.9851670489736, 177.3944949766613], [348.36912049503496, 905.6418524843069], [551.5084310425435, 451.5257933222055], [477.2609687701745, 936.9213089935386], [660.253966321679, 414.12004409856365], [309.06198835717873, 946.8415498902231], [901.287636846894, 654.5865980680124], [441.88332215923987, 198.08686213210794], [934.1316690031978, 111.75052206925776], [269.7183091638293, 394.0832619977572], [554.4573943351378, 715.5515479213941], [941.9960059932797, 461.18683408297505], [60.75211977039634, 455.9163039410577], [120.09532065408325, 738.6518461728725], [448.64016546031957, 671.7300699444477], [237.73016626365188, 802.6187649889112], [666.0285249039201, 379.44017172883144], [836.6235413584285, 365.0382135928154], [347.6496481461467, 384.4418353475474]]
types = [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1]
radius = [50, 100]
plot(data_asc, sensors, types, radius)
